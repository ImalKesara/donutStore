//Stack with struct
#include<stdio.h>
#include<stdlib.h>
#define MAX 6

struct stack{
	int stack_arr[MAX];
	int top;
}st;

//int stack_arr[MAX];
//int top = -1;


int isFull(){
	if(st.top == MAX -1){
		return 1;
	}else{
		return 0;
	}
}

int isEmpty(){
	if(st.top == -1){
		return 1;
	}else{
		return 0;
	}

}

void push(int data){
	if(isFull()){
		printf("Stack overflow");
		return;
	}
	st.top += 1;
	st.stack_arr[st.top] = data;
}

int pop(){
	int value;
	if(st.top == -1){
		printf("Stack overflow");
		exit(1);
	}
	value = st.stack_arr[st.top];
	st.top = st.top -1;
	return value;
	
}

int peek(){
	if(isEmpty()){
		printf("Stack underflow \n");
		exit(1);
	}
	return st.stack_arr[st.top];

}

void display(){

	int i;
	if(st.top ==-1){
		printf("Stack underflow \n");
		return;
	}
	for(i =st.top ; i >=0 ; i--){
		printf("%d,", st.stack_arr[i]);
	}
	printf("\n");
	
}

int main(){
	st.top = -1;
	int choice,data;
	while(1){
		printf("\n");
		printf("1. push \n");
		printf("2. Pop \n");
		printf("3. Print the top element \n");
		printf("4. Print all the elements of the stacks \n");
		printf("5. Quit  \n");
		printf("Please eneter ur choice \n");
		scanf("%d",&choice);
		
		switch(choice){
		case 1:
			printf("Enter the element to be pushed ");
			scanf("%d",&data);
			push(data);
			break;
		
		case 2:
			data = pop();
			printf("Deleted element is %d \n",data);
			break;
		case 3:
			 printf("the topmost element of the stack is %d\n", peek());
			 break;
		case 4:
			display();
			break;
		case 5:
			exit(1);
		default:
			printf("Wrong choice \n");
		}

	}
	
	 
return 0;
}




//Queue
#include<stdio.h>
#include<stdlib.h>

#define n 5

int queue[n],ch = 1, front = 0, rear = 0, i, j = 1, x = n;

void enqueue(int value) {
    if (isFull())
        printf("Queue is full\n");
    else {
        rear = (rear + 1) % n;
        queue[rear] = value;
    }
}

void dequeue() {
    if (isEmpty())
        printf("Queue is empty\n");
    else {
        front = (front + 1) % n;
        printf("Deleted element is %d\n", queue[front]);
    }
}

void display() {
    if (isEmpty())
        printf("Queue is empty\n");
    else {
        printf("Queue elements are:\n");
        for (i = (front + 1) % n; i != rear; i = (i + 1) % n)
            printf("%d ", queue[i]);
        printf("%d\n", queue[i]);
    }
}

int peek() {
    if (isEmpty()) {
        printf("Queue is empty\n");
        return -1;
    } else {
        return queue[(front + 1) % n];
    }
}

int isEmpty() {
    return front == rear;
}

int isFull() {
    return (rear + 1) % n == front;
}

int main() {
    printf("Queue using Array\n");
    printf("1. Enqueue\n2. Dequeue\n3. Display\n4. Peek\n5. Exit\n");
    while (ch) {
        printf("\nEnter the Choice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                printf("Enter the element to be inserted: ");
                scanf("%d", &j);
                enqueue(j);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Element at front of the queue is: %d\n", peek());
                break;
            case 5:
                exit(0);
            default:
                printf("Wrong Choice: please see the options\n");
        }
    }
    return 0;
}

